<?php
declare(strict_types = 1);
namespace hexydec\css;

class mediaquery {

	/**
	 * @var cssdoc The parent htmldoc object
	 */
	protected $root;

	/**
	 * @var array An array of media query parameters
	 */
	protected $media = [];

	/**
	 * @var array An array of child token objects
	 */
	protected $rules = [];

	/**
	 * Constructs the comment object
	 *
	 * @param cssdoc $root The parent htmldoc object
	 */
	public function __construct(cssdoc $root, array $media = null) {
		$this->root = $root;
		$this->media = $media;
	}

	/**
	 * Parses an array of tokens into an HTML documents
	 *
	 * @param array &$tokens An array of tokens generated by tokenise()
	 * @param array $config An array of configuration options
	 * @return void
	 */
	public function parse(array &$tokens) : bool {
		$default = $rule = [
			'media' => false,
			'only' => false,
			'not' => false,
			'properties' => []
		];

		// parse tokens
		$token = current($tokens);
		do {
			switch ($token['type']) {
				case 'directive':

					// parse media query
					if ($token['value'] == '@media') {
						$media = [];
						$rule = $default;
						while (($token = next($tokens)) !== false) {
							switch ($token['type']) {
								case 'string':
									if ($token['value'] == 'only') {
										$rule['only'] = true;
									} elseif ($token['value'] == 'not') {
										$rule['not'] = true;
									} elseif ($token['value'] != 'and') {
										$rule['media'] = $token['value'];
									}
									break;
								case 'bracketopen':
									$compare = false;
									while (($token = next($tokens)) !== false && $token['type'] != 'bracketclose') {
										if ($token['type'] == 'string') {
											if (!$compare) {
												$prop = $token['value'];
											} elseif ($compare == ':') {
												$rule['properties'][$prop] = $token['value'];
												$prop = false;
												$compare = false;
											} else {
												if (intval($prop)) {
													$rule['properties']['min-'.$token['value']] = $prop;
													$prop = 'max'.$token['value'];
												} else {
													$rule['properties'][$prop] = $token['value'];
												}
												$prop = false;
												$compare = false;
											}
										} elseif ($token['type'] == 'colon') {
											$compare = ':';
										} elseif ($token['type'] == 'comparison' && $token['value'] == '<=') {
											$compare = '<=';
										}
									}
									if ($prop) {
										$rule['properties'][$prop] = null;
									}
									break;
								case 'comma':
									$media[] = $rule;
									$rule = $default;
									break;
								case 'curlyopen':
									break 2;
							}
						}
						$media[] = $rule;
							// var_dump($media);

						// create media query object
						$item = new mediaquery($this->root, $media);
						$item->parse($tokens);
						$this->rules[] = $item;
					} else {
						$item = new directive($this);
						$item->parse($tokens);
						$this->rules[] = $item;
					}
					break;
				case 'string':
					$item = new rule($this);
					$item->parse($tokens);
					$this->rules[] = $item;
					break;
				case 'curlyclose':
					break 2;
			}
		} while (($token = next($tokens)) !== false);
		return !!$this->rules;
	}

	/**
	 * Minifies the internal representation of the comment
	 *
	 * @param array $minify An array of minification options controlling which operations are performed
	 * @return void
	 */
	public function minify(array $minify) : void {
		foreach ($this->rules AS $item) {
			$item->minify($minify);
		}
	}

	/**
	 * Compile the property to a string
	 *
	 * @param array $options An array of compilation options
	 * @return void
	 */
	public function compile(array $options) : string {
		$b = $options['output'] != 'minify';
		$css = '';
		if ($this->media) {
			$css .= '@media ';
			$media = [];
			foreach ($this->media AS $item) {
				$query = '';
				$join = '';
				if ($item['media']) {
					$query .= trim(($item['only'] ? ' only' : '').($item['not'] ? ' not' : '').($item['media'] ? ' '.$item['media'] : ''));
					$join = ' and ';
				}
				foreach ($item['properties'] AS $key => $prop) {
					$query .= $join.'('.$key.($prop === null ? '' : ':'.($b ? ' ' : '').$prop).')';
					$join = ' and ';
				}
				$media[] = $query;
			}
			$css .= implode($b ? ', ' : ',', $media);
			$css .= $b ? " {\n" : '{';
			if ($b) {
				$options['prefix'] = "\t";
			}
		}

		// compile selectors
		$join = '';
		foreach ($this->rules AS $item) {
			$css .= $join.$item->compile($options);
			$join = $b ? "\n\n" : '';
		}
		if ($this->media) {
			$css .= '}';
		}
		return $css;
	}
}
