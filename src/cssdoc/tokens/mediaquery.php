<?php
declare(strict_types = 1);
namespace hexydec\css;

class mediaquery {

	/**
	 * @var cssdoc The parent htmldoc object
	 */
	protected $root;

	/**
	 * @var array An array of child token objects
	 */
	protected $rules = [];

	/**
	 * Constructs the comment object
	 *
	 * @param cssdoc $root The parent htmldoc object
	 */
	public function __construct(cssdoc $root) {
		$this->root = $root;
	}

	/**
	 * Parses an array of tokens into an HTML documents
	 *
	 * @param array &$tokens An array of tokens generated by tokenise()
	 * @param array $config An array of configuration options
	 * @return void
	 */
	public function parse(array &$tokens) : bool {

		// parse tokens
		while (($token = next($tokens)) !== false) {
			switch ($token['type']) {
				case 'string':
					if ($token['value'] == '@media') {
						$item = new mediaquery($this->root);
						$item->parse($tokens);
						$this->rules[] = $item;
					} else {
						prev($tokens);
						$item = new rule($this);
						$item->parse($tokens);
						$this->rules[] = $item;
					}
					break;
			}
		}
		return !!$this->rules;
	}

	/**
	 * Minifies the internal representation of the comment
	 *
	 * @param array $minify An array of minification options controlling which operations are performed
	 * @return void
	 */
	public function minify(array $minify) : void {
	}

	/**
	 * Compile the property to a string
	 *
	 * @param array $options An array of compilation options
	 * @return void
	 */
	public function compile(array $options) : string {
		$b = $options['output'] != 'minify';
		$css = '';

		// compile selectors
		$join = '';
		foreach ($this->rules AS $item) {
			$css .= $join.$item->compile($options);
			$join = $b ? "\n\n" : '';
		}
		return $css;
	}
}
