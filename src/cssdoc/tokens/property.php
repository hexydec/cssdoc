<?php
declare(strict_types = 1);
namespace hexydec\css;

class property {

	/**
	 * @var rule The parent rule object
	 */
	protected $root;

	/**
	 * @var string The name of the property
	 */
	protected $name;

	/**
	 * @var string The value of the property
	 */
	protected $value;

	/**
	 * @var bool Whether the property is important
	 */
	protected $important = false;

	public $semicolon = true;

	protected $comment = null;

	/**
	 * Constructs the comment object
	 *
	 * @param cssdoc $root The parent htmldoc object
	 */
	public function __construct($root) {
		$this->root = $root;
	}

	/**
	 * Parses an array of tokens into an HTML documents
	 *
	 * @param array &$tokens An array of tokens generated by tokenise()
	 * @param array $config An array of configuration options
	 * @return void
	 */
	public function parse(array &$tokens) : void {
		$token = current($tokens);
		do {
			if ($token['type'] == 'string') {
				$prop = $token['value'];
				while (($token = next($tokens)) !== false) {
					switch ($token['type']) {
						case 'colon':
							$important = false;
							if (($value = $this->parsePropertyValue($tokens, $important, $comment)) !== null) {
								$this->name = $prop;
								$this->value = $value;
								$this->important = $important;
								$this->comment = $comment;
							}
							break;
						case 'semicolon':
							$this->semicolon = true;
						case 'curlyclose':
							break 3;
					}
				}
			}

			// end rule
			if ($token['type'] == 'curlyclose') {
				prev($tokens);
				break;
			}
		} while (($token = next($tokens)) !== false);
	}

	protected function parsePropertyValue(array &$tokens, bool &$important = false, string &$comment = null) : ?array {
		$properties = [];
		$values = [];
		$important = false;
		$comment = null;
		while (($token = next($tokens)) !== false) {
			switch ($token['type']) {
				case 'quotes':
					$values[] = $token['value'];
					break;
				case 'comma':
					$properties[] = $values;
					$values = [];
					break;
				case 'bracketopen':
					$values[] = self::parsePropertyValue($tokens);
					break;
				case 'comment':
					$comment = $token['value'];
					break;
				case 'whitespace':
					break;
				case 'semicolon':
				case 'curlyclose':
					prev($tokens);
				case 'bracketclose':
					break 2;
				default:
					if ($token['value'] == '!important') {
						$important = true;
					} else {
						$value = $token['value'];
						while (($token = next($tokens)) !== false) {
							if (!in_array($token['type'], ['semicolon', 'bracketopen', 'bracketclose', 'whitespace', 'curlyclose', 'comma', 'comment'])) {
								$value .= $token['value'];
							} else {
								prev($tokens);
								break;
							}
						}
						$values[] = $value;
					}
					break;
			}
		}
		if ($values) {
			$properties[] = $values;
		}
		return $properties ? $properties : null;
	}

	/**
	 * Minifies the internal representation of the comment
	 *
	 * @param array $minify An array of minification options controlling which operations are performed
	 * @return void
	 */
	public function minify(array $minify) : void {
		 $this->value = $this->minifyValues($this->name, $this->value, $minify);
	}

	protected function minifyValues(string $key, array $values, array $minify) : array {
		foreach ($values AS &$item) {

			// value in brackets
			if (is_array($item)) {
				$item = $this->minifyValues($key, $item, $minify);
			} else {
				if ($minify['removezerounits'] && preg_match('/^0(?:\.0*)?([a-z%]++)$/i', $item, $match)) {
					$item = '0';
					if ($match[1] == 'ms') {
						$match[1] = 's';
					}
					if ($match[1] == 's') {
						$item .= 's';
					}
				}
				if ($minify['removeleadingzero'] && preg_match('/^0++(\.0*+[1-9][0-9%a-z]*+)$/', $item, $match)) {
					$item = $match[1];
				}
				if ($minify['removequotes'] && $key != 'content' && preg_match('/^("|\')([^ \'"()]++)\\1$/i', $item, $match)) {
					$item = $match[2];
				} elseif ($minify['convertquotes'] && mb_strpos($item, "'") === 0) {
					$item = '"'.addcslashes(stripslashes(trim($item, "'")), "'").'"';
				}
				if ($minify['shortenhex'] && preg_match('/^#(([a-f0-6])\\2)(([a-f0-6])\\4)(([a-f0-6])\\6)/i', $item, $match)) {
					$item = '#'.$match[2].$match[4].$match[6];
				}
				if ($minify['lowerhex'] && preg_match('/^#[a-f0-6]{3,6}$/i', $item)) {
					$item = mb_strtolower($item);
				}
			}
		}
		unset($item);
		return $values;
	}

	/**
	 * Compile the property to a string
	 *
	 * @param array $options An array of compilation options
	 * @return void
	 */
	public function compile(array $options) : string {
		$b = $options['output'] != 'minify';
		$css = $options['prefix'].$this->name.':'.($b ? ' ' : '');
		$join = '';
		foreach ($this->value AS $value) {
			$css .= $join;
			$space = '';
			foreach ($value AS $item) {
				if (is_array($item)) {
					$css .= '(';
					$bjoin = '';
					foreach ($item AS $bracket) {
						$bspace = '';
						foreach ($bracket AS $val) {
							$css .= $bspace.$val;
							$bspace = ' ';
						}
						$css .= $bjoin;
						$bjoin = $b ? ', ' : ',';
					}
					$css .= ')';
				} else {
					$css .= $space.$item;
				}
				$space = ' ';
			}
			$join = $b ? ', ' : ',';
		}
		if ($this->semicolon) {
			$css .= ';';
		}
		return $css;
	}
}
