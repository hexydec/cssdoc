<?php
declare(strict_types = 1);
namespace hexydec\css;

class rule {

	/**
	 * @var mediaquery The parent htmldoc object
	 */
	protected $root;

	/**
	 * @var array An array of selectors
	 */
	protected $selectors = [];

	/**
	 * @var array An array of properties
	 */
	protected $properties = [];

	/**
	 * Constructs the comment object
	 *
	 * @param cssdoc $root The parent htmldoc object
	 */
	public function __construct(document $root) {
		$this->root = $root;
	}

	/**
	 * Parses an array of tokens into an HTML documents
	 *
	 * @param array &$tokens An array of tokens generated by tokenise()
	 * @param array $config An array of configuration options
	 * @return bool Whether anything was parsed
	 */
	public function parse(array &$tokens) : bool {

		// parse tokens
		$selector = true;
		$token = current($tokens);
		do {
			switch ($token['type']) {
				case 'join':
				case 'string':
					if ($selector) {
						$item = new selector($this);
						if ($item->parse($tokens)) {
							$this->selectors[] = $item;
						}
					} else {
						$item = new property($this);
						if ($item->parse($tokens)) {
							$this->properties[] = $item;
						}
					}
					break;
				case 'curlyopen':
					$selector = false;
					break;
				case 'curlyclose':
					break 2;
			}
		} while (($token = next($tokens)) !== false);
		return !empty($this->selectors) && !empty($this->properties);
	}

	/**
	 * Minifies the internal representation of the comment
	 *
	 * @param array $minify An array of minification options controlling which operations are performed
	 * @return void
	 */
	public function minify(array $minify) : void {

		// minify selectors
		foreach ($this->selectors AS $item) {
			$item->minify($minify);
		}

		// minify properties
		foreach ($this->properties AS $item) {
			$item->minify($minify);
		}

		if ($this->properties && $minify['removesemicolon']) {
			$this->properties[count($this->properties)-1]->semicolon = false;
		}
	}

	/**
	 * Compile the property to a string
	 *
	 * @param array $options An array of compilation options
	 * @return void
	 */
	public function compile(array $options) : string {
		$b = $options['output'] != 'minify';
		$css = $options['prefix'];

		// compile selectors
		$join = '';
		foreach ($this->selectors AS $item) {
			$css .= $join.$item->compile($options);
			$join = $b ? ', ' : ',';
		}
		$css .= $b ? ' {' : '{';

		// compile properties
		$tab = $b ? "\n\t" : '';
		foreach ($this->properties AS $item) {
			$css .= $tab.$item->compile($options);
		}
		$css .= $b ? "\n".$options['prefix'].'}' : '}';
		return $css;
	}
}
