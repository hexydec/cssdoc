<?php
namespace hexydec\html;

class style {

	/**
	 * @var htmldoc The parent htmldoc object
	 */
	protected $root;

	/**
	 * @var string A string containing CSS styles
	 */
	protected $content = null;

	/**
	 * Constructs the style object
	 *
	 * @param htmldoc $root The parent htmldoc object
	 */
	public function __construct(htmldoc $root) {
		$this->root = $root;
	}

	/**
	 * Parses an array of tokens into an HTML documents
	 *
	 * @param array &$tokens An array of tokens generated by tokenise()
	 * @param array $config An array of configuration options
	 * @return bool Whether the parser was able to capture any objects
	 */
	public function parse(array &$tokens) {
		$value = '';
		$token = current($tokens);
		while ($token !== false && ($token['type'] != 'tagclose' || $token['value'] != '</style>')) {
			if ($token['type'] == 'cdata') {
				$value .= mb_substr($token['value'], 9, -3);
			} else {
				$value .= $token['value'];
			}
			$token = next($tokens);
		}
		prev($tokens);
		if ($value) {
			$this->content = $value;
		}
	}

	/**
	 * Minifies the internal representation of the styles using an external minifier
	 *
	 * @param array $minify An array of minification options controlling which operations are performed
	 * @return void
	 */
	public function minify(array $minify) {
		if ($minify['css'] !== false && $this->content) {
			$func = $this->root->getConfig('css');
			$this->content = $func === false ? trim($this->content) : call_user_func($func, $this->content, $minify['css']);
		}
	}

	/**
	 * Compile the styles as an HTML string
	 *
	 * @param array $options An array indicating output options
	 * @return string The compiled HTML
	 */
	public function html(array $options = null) : ?string {
		return $options['xml'] ? '<![CDATA['.$this->content.']]>' : $this->content;
	}

	public function __get($var) {
		return $this->$var;
	}
}
